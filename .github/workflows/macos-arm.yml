name: macOS (ARM binary)

on:
    push:
        branches: ["master"]

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        runs-on: macos-latest

        permissions:
            contents: write

        steps:
            - uses: actions/checkout@v4
            - name: Install dependencies
              run: cargo install cargo-bundle
            - name: Create .env
              env:
                  DOTENV: ${{ secrets.DOTENV }}
                  TEST: ${{ secrets.TEST }}
              run:
                  echo $TEST
                  echo $DOTENV > .env
            - name: Build
              run: cargo build --verbose --release
            - name: Bundle
              run: cargo bundle --release
            # Codesigning adapted from https://federicoterzi.com/blog/automatic-code-signing-and-notarization-for-macos-apps-using-github-actions/
            - name: Codesign app bundle
              env:
                  MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
                  MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
                  MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
                  MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
              run: |
                  # Turn our base64-encoded certificate back to a regular .p12 file

                  echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

                  # We need to create a new keychain, otherwise using the certificate will prompt
                  # with a UI dialog asking for the certificate password, which we can't
                  # use in a headless CI environment

                  security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
                  security default-keychain -s build.keychain
                  security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
                  security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
                  security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

                  # We finally codesign our app bundle, specifying the Hardened runtime option

                  /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime target/release/bundle/osx/Muzak.app -v
            - name: "Notarize app bundle"
              env:
                  PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
                  PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
                  PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
              run: |
                  # Store the notarization credentials so that we can prevent a UI password dialog
                  # from blocking the CI

                  echo "Create keychain profile"
                  xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

                  # We can't notarize an app bundle directly, but we need to compress it as an archive.
                  # Therefore, we create a zip file containing our app bundle, so that we can send it to the
                  # notarization service

                  echo "Creating temp notarization archive"
                  ditto -c -k --keepParent "target/release/bundle/osx/Muzak.app" "notarization.zip"

                  # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
                  # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
                  # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
                  # you're curious

                  echo "Notarize app"
                  xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

                  # Finally, we need to "attach the staple" to our executable, which will allow our app to be
                  # validated by macOS even when an internet connection is not available.
                  echo "Attach staple"
                  xcrun stapler staple "target/release/bundle/osx/Muzak.app"
            - uses: actions/upload-artifact@v4
              with:
                  name: muzak
                  path: target/release/bundle/osx/
            - name: Zip files
              run: zip -r macos.zip Muzak.app/
              working-directory: target/release/bundle/osx
            - uses: softprops/action-gh-release@v2
              with:
                  files: target/release/bundle/osx/macos.zip
                  prerelease: true
                  name: latest
                  tag_name: latest
